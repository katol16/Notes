// WŁAŚCIWOŚCI OBIEKTU GLOBALNEGO

	var globVar = 1;
	let globLet = 2;
	const globConst = 3;

	// Teraz wpisując w przeglądarce w consoli jedno z powyższych (globVar, globLet, globConst)
	// to otrzymamy normlanie ich wartości, natomiast jak wpsizemy obiekt globlany window i zoabczymy jego podgląd, to zobaczymy, że zmienna globVar będzie w niej zapisana jako wartość
	// będzie -> globVar: 1
	// natomiast NIE BĘDZIE w obiekcie window globLet i globConst!

	// LET vs. CONST
	// Przypisać nową wartośc możesz tylko do let, do const nie, bo to stała!

	// CONST - ZABEZPIECZONA PRZED...
		// Czy const zabezpiecza wartość? TAK(typ prosty) i NIE (obiekt) :)
		// Czy const zabezpiecza zmienną? TAK, przed przypisaniem innej wartości
		// Przykłady:
			const aNumber = 5;
			// a = 6; // wyrzuci błąd: TypeError: Assignment to constant variable

			// teraz dla obiektu (tablica to też obiekt)
			const bArray = ['a', 'b'];
			bArray[2] = 'c';
			bArray[0] = 'a1';
			console.log(bArray); // dostaniemy zmienioną tablicę, ['a1','b','c'] - chodzi o to, że ta tablica będzie zawsze przypisana do zmiennej, ale nie koniecznie taka sama tablica

			// const bArray = ['a', 'b']; // teraz otrzymamy bład
			// czyli jeśli damy w const obiekt, to to będzie ten obiekt, ale on sam w sobie może ewoluować

	// DEKLARACJA BEZ INICJALIZACJI
	// czyli:
	// let a; - undefined
	// var a; -undefined
	// const a; - BŁĄD! - będzie błąd Missing initilazer const declaration

	// Kiedy const, Kiedy let, kiedy var
	// Zapamiętaj: Użyj const, chyba że z jakiegoś powodu zmienisz w przyszłości zawartośc na inną wartość (nie chodzi o samą wartośc tylko inną wartość)
	// Jak nie możesz użyć const, użyj let.
	// Użyj var jeśli z jakiegoś powodu zależy Ci na jego odmiennych właściwościach.
