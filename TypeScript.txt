TYPESCRIPT

	interface -> 
		służy do opisania typów jakie mają dane wartości. Można użyć typów opcjonalnych np:
			interface Square {
				color?: string;
				width?: number;
			}
		Mozna też użyć "Readonly properties":
			interface Point {
			    readonly x: number;
			    readonly y: number;
			}
			You can construct a Point by assigning an object literal. After the assignment, x and y can’t be changed.

			let p1: Point = { x: 10, y: 20 };
			p1.x = 5; // error!

			Podobnie z tablicami, też możesz użyć ReadonlyArray<T>:
				TypeScript comes with a ReadonlyArray<T> type that is the same as Array<T> with all mutating methods removed, so you can make sure you don’t change your arrays after creation:
					let a: number[] = [1, 2, 3, 4];
					let ro: ReadonlyArray<number> = a;
					ro[0] = 12; // error!
					ro.push(5); // error!
					ro.length = 100; // error!
					a = ro; // error!
				On the last line of the snippet you can see that even assigning the entire ReadonlyArray back to a normal array is illegal. You can still override it with a type assertion, though:
					a = ro as number[];

			readonly vs const:
				The easiest way to remember whether to use readonly or const is to ask whether you’re using it on a variable or a property. Variables use const whereas properties use readonly.

